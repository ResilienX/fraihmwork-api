---
openapi: 3.0.1
info:
  title: FRAIHMWORK Health And Integrity API
  description: 'FRAIHMWORK allows for multiple implementations of basic health and integrity monitoring services for other systems in a given network. This set of APIs are for systems that elect to do HTTP POST calls to push their state and fault information to the FRAIHMWORK platform, rather than hosting their own server endpoint or TCP/UDP streams. This API will versioned according to SemVer 2.0.0 rules (as described here: https://semver.org/)'
  contact:
    email: g.dorchies@resilienx.com
  version: 1.5.1
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io

servers:
- url: https://<site>.fraihmwork.resilienx.com/api

tags:
- name: Monitor
  description: Functions relating to monitoring capabilities provided by FRAIHMWORK
  
- name: Mitigate
  description: Functions relating to mitigation capabilities provided by FRAIHMWORK

- name: Blocklist
  description: Blocklist management api endpoints  

- name: Components
  description: All component related api endpoints
  
- name: Faults
  description: All fault related api endpoints
  
- name: Mitigation
  description: Mitigation information

- name: System
  description: Deprecated system endpoints, replaced by "Components"
  
- name: UUID Control
  description: Functions for helping manage UUIDs for components and faults

paths:
  /monitor/v1/system:
    post:
      deprecated: true
      tags:
      - System
      - Monitor
      summary: Post an update on all current component properties
      description: This information allows FRAIHMWORK to track basic information about a component. Any extra or custom fields are expected to always be present even if null values are provided at first. Using this endpoint means that the component needs to be registered (under the hood), so a UUID will be created and assigned in the response
      operationId: postSystemInformation
      requestBody:
        description: JSON description of the current component state
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitoredComponent'
      responses:
        201:
          description: Successfully posted new component information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        208:
          description: Already reported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client cannot create new components
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.write, fraihmwork.component.admin]

    get:
      deprecated: true
      tags:
      - System
      - Monitor
      summary: Request existing registration details for information about a component
      description: This endpoint allows requesting services to find information about registered instaces that FRAIHMWORK is currently aware of
      operationId: getRegistrations
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ComponentRegistrationInformation'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client cannot read components
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.read, fraihmwork.component.write, fraihmwork.component.admin]

  /monitor/v1/system/{uuid}:
    get:
      deprecated: true
      tags:
      - System
      - Monitor
      summary: Request existing registration for specific component
      description: This endpoint allows requesting services to find information about registered instances that FRAIHMWORK is currently aware of
      operationId: getRegistration
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the component properties being updated
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentRegistrationInformation'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client cannot read this component
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: Registration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.read, fraihmwork.component.write, fraihmwork.component.admin]

    put:
      deprecated: true
      tags:
      - System
      - Monitor
      summary: Update existing properties about a component
      description: This information allows FRAIHMWORK to track basic information about a component. Any extra or custom fields are expected to always be present even if null values are provided at first. 
      operationId: updateSystemInformation
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the component properties being updated
      requestBody:
        description: JSON description of the current component state
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitoredComponent'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client cannot update this component
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: UUID not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.write, fraihmwork.component.admin]

    delete:  
      deprecated: true
      tags:
      - System
      - Monitor
      summary: Deletes an active entry
      description: This operation removes a component's basic information from FRAIHMWORK, thus rendering itself inactive.
      operationId: deleteSystemInformation
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the component properties being deleted
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client cannot delete this component
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: UUID not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.write, fraihmwork.component.admin]

  /monitor/v1/system/{uuid}/refresh:
    post:
      deprecated: true
      tags:
      - System
      - Monitor
      summary: Refresh existing component properties
      description: Permits an already registered component to be refreshed without changing any properties
      operationId: refreshSystemInformation
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the component property being refreshed
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client cannot update components
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: UUID not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.write, fraihmwork.component.admin]
  /monitor/v1/component:
    post:
      tags:
      - Components
      - Monitor
      summary: Post a new component
      description: This information allows FRAIHMWORK to track basic information about a component. Any extra or custom fields are expected to always be present even if null values are provided at first. Using this endpoint means that the component needs to be registered (under the hood), so a UUID will be created and assigned in the response. 
      operationId: postComponentInformation
      requestBody:
        description: JSON description of the current component state
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitoredComponent'
      responses:
        201:
          description: Successfully posted new component information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        208:
          description: Already reported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to create components
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.write, fraihmwork.component.admin]

    get:
      tags:
      - Components
      - Monitor
      summary: Retrieve all of the components in FRAIHMWORK, filtered by any optional criteria provided.
      operationId: findAllComponents
      parameters:
      - name: state
        in: query
        description: Filter results by the state of the components. Can leave null to not filter
        schema:
          type: string         
          enum:
          - UNAVAILABLE
          - STARTING_UP
          - ONLINE
          - FAULTED
      - name: parent
        in: query
        description: Filter results to only return components with a specific parent component. Can leave null to not filter
        schema:
          type: string         
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActiveComponent'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to read components
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      deprecated: false
      security:
      - OAuth2: [fraihmwork.component.read, fraihmwork.component.write, fraihmwork.component.admin]

  /monitor/v1/component/{uuid}:
    get:
      tags:
      - Components
      - Monitor
      summary: findComponentByUuid
      operationId: findComponentByUuid
      parameters:
      - name: uuid
        in: path
        description: uuid
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActiveComponent'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to read this component
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      deprecated: false
      security:
      - OAuth2: [fraihmwork.component.read, fraihmwork.component.write, fraihmwork.component.admin]

    put:
      tags:
      - Components
      - Monitor
      summary: Update existing properties about a component
      description: This information allows FRAIHMWORK to track basic information about a component. Any extra or custom fields are expected to always be present even if null values are provided at first. Note, requests with the fraihmwork.component.write permission may be limited for authorization reasons. See the descriptions in the securitySchemes.OAuth2.flows.clientCredentials.scopes for more details.       
      operationId: updateComponentInformation
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the component properties being updated
      requestBody:
        description: JSON description of the current component state
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitoredComponent'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to update this component
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: UUID not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.write, fraihmwork.component.admin]

    delete:  
      tags:
      - Components
      - Monitor
      summary: Deletes an active entry
      description: This operation removes a components's basic information from FRAIHMWORK, thus rendering itself inactive. Note, requests with the fraihmwork.component.write permission may be limited for authorization reasons. See the descriptions in the securitySchemes.OAuth2.flows.clientCredentials.scopes for more details.  
      operationId: deleteComponentInformation
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the component properties being deleted
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to delete this component
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: UUID not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.write, fraihmwork.component.admin]

  /monitor/v1/component/{uuid}/refresh:
    post:
      tags:
      - Components
      - Monitor
      summary: Refresh existing component properties
      description: Permits an already registered component to be refreshed without changing any properties. Note, requests with the fraihmwork.component.write permission may be limited for authorization reasons. See the descriptions in the securitySchemes.OAuth2.flows.clientCredentials.scopes for more details.  
      operationId: refreshComponentInformation
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the component property being refreshed
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to update this component
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: Target component not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.write, fraihmwork.component.admin]

  /monitor/v1/component/{uuid}/timeOfPerformance:
    post:
      tags:
      - Components
      - Monitor
      summary: Resets the time of performance 
      description: Given a specific component UUID, this operation establishes a new start time for the measurement of the 'time of performance' field tracked by components. When received, the server immediately sets the start time to the current clock time. Note, requests with the fraihmwork.component.write permission will only be accepted if the client used is the 'owner' of the component. Otherwise a 403 forbidden will be returned. See the descriptions in the securitySchemes.OAuth2.flows.clientCredentials.scopes for more details.     
      operationId: resetTimeOfPerformance
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the component for Time of Performance to be reset
      responses:
        200:
          description: Time of performance successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to reset this component's time of performance
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: Target component could not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.write, fraihmwork.component.admin]
  /monitor/v1/component/{uuid}/timeOfReplacement:
    post:
      tags:
      - Components
      - Monitor
      summary: Resets the time of replacement 
      description: Given a specific component UUID, this operation establishes a new start time for the measurement of the 'time of replacement' field tracked by components. When received, the server immediately sets the start time to the current clock time. Note, requests with the fraihmwork.component.write permission will only be accepted if the client used is the 'owner' of the component. Otherwise a 403 forbidden will be returned. See the descriptions in the securitySchemes.OAuth2.flows.clientCredentials.scopes for more details.     
      operationId: resetTimeOfReplacement
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the component for Time of Replacement to be reset
      responses:
        200:
          description: Time of replacement successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to reset this component's time of replacement
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: Target component could not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.write, fraihmwork.component.admin]

  /monitor/v1/component/schedule/unavailability:
    post:
      tags:
      - Components
      summary: Add unavailability schedules for one or more components.
      description: |
        Add unavailability schedules for one or more components.
        - You can specify schedules for multiple components in one request.
        - Multiple schedules can be added in a single request by providing an array of `RecurringSchedule` objects.
        - Schedules can specify specific days or use "All" to represent every day of the week.
        - Users can also post separate `days`, such as "Monday", "Tuesday" in addition to "All," to provide more control over the unavailability schedule for specific days.
        - Each day in the schedule can have specific `start` and `end` times, allowing full control over when the component is unavailable.
        - Start and end times must be provided in the format `T11:41:23Z`, where 'T' represents time and 'Z' represents UTC, or `11:41:23Z` without 'T'. Both formats, with and without 'T', are acceptable.     
        - Timezone offsets are also accepted (e.g., `T11:41:23-05:00` or `11:41:23-05:00`), and can be used to define precise periods of unavailability within each day.
      operationId: addUnavailabilityScheduleUsingPOST
      requestBody:
        description: The unavailability schedule data for one or more components
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RecurringSchedule'
      responses:
        201:
          description: Successfully added the unavailability schedule(s)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        400:
          description: Bad request - Invalid schedule or overlapping schedules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to add the schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.write, fraihmwork.component.admin]

    get:
      tags:
      - Components
      summary: Get the unavailability schedule for one or more components.
      description: |
        Retrieve the unavailability schedule for one or more components.
        - Provide one or more `componentId` values as query parameters to filter the results.
        - If no `componentId` is provided, schedules for all components will be retrieved.
        - The response will return a separate unavailability schedule for each component.
        - Each day within a component's unavailability schedule will be returned individually, whether it has a time period or not.
        - If a day has no unavailability scheduled, it will be included with an empty `timePeriods` array.
        - Start and end times must be in ISO 8601 format, either in UTC (`T11:41:23Z` or `11:41:23Z`) or with timezone offsets (`T11:41:23-05:00` or `11:41:23-05:00`). The 'T' is optional and may not appear in all periods, depending on the posted data.
        - The order in which days and schedules are returned is not guaranteed and should not be relied upon.
      operationId: getUnavailabilityScheduleUsingGET
      parameters:
      - in: query
        name: componentIds
        description: The UUID(s) of the component(s)
        required: false
        schema:
          type: array
          items:
            type: string
            format: uuid
      responses:
        200:
          description: Successfully retrieved the unavailability schedule(s)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecurringSchedule'
              examples:
                singleComponent:
                  summary: Example response for a single component
                  value: 
                    - componentId: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                      schedules:
                        - days: ["Monday"]
                          periods:
                            - start: "00:00:00Z"
                              end: "T23:59:00Z"
                        - days: ["Tuesday"]
                          periods:
                            - start: "T09:30:30Z"
                              end: "17:00:00Z"
                        - days: ["Thursday"]
                          periods:
                            - start: "T08:00:00+02:00"
                              end: "16:00:00+02:00"
                        - days: ["Friday"]
                          periods:
                            - start: "10:00:00-05:00"
                              end: "T18:00:00-05:00"
                        - days: ["Saturday"]
                          periods:
                            - start: "12:00:00Z"
                              end: "T20:00:00Z"
                        - days: ["Wednesday"]
                          periods: []
                        - days: ["Sunday"]
                          periods: []
        400:
          description: Bad request - Invalid component ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to read the unavailability schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: Not Found - No unavailability schedule found for the specified component ID(s).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.read, fraihmwork.component.write, fraihmwork.component.admin]

  /monitor/v1/component/schedule/unavailability/remove:
    post:
      tags:
      - Components
      summary: Remove unavailability schedules for one or more components.
      description: |
        Remove unavailability schedules for one or more components.
        - If only the `componentId` is provided without any schedules, all days and all periods for that component will be deleted.
        - If specific `days` are provided, the entire unavailability schedule for those days, including all periods, will be deleted for the specified component(s).
        - If both `days` and `periods` are provided, only the specified periods for those days will be deleted.
        - If `days`, `periods`, `start`, and `end` are provided, the request will delete specific time periods within those days, targeting the exact `start` and `end` times.
        - Start and end times must be in ISO 8601 format, either in UTC (`T11:41:23Z` or `11:41:23Z`) or with timezone offsets (`T11:41:23-05:00` or `11:41:23-05:00`). The 'T' is optional and can be omitted in the time format.
        - If no `componentId` is provided, the request will result in an error since `componentId` is required.
        - To remove schedules for multiple components, provide each `componentId` with the corresponding `schedules`, `days`, and `Periods`.

      operationId: removeUnavailabilityScheduleUsingPOST
      requestBody:
        description: The unavailability schedule data for removal
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RecurringSchedule'
      responses:
        200:
          description: Successfully removed the unavailability schedule(s)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        400:
          description: Bad request - Invalid schedule or no schedule provided for removal.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to remove the schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: Not Found - No matching unavailability schedule found for the specified component ID(s).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.write, fraihmwork.component.admin]

  /monitor/v1/fault:
    post:
      tags:
      - Faults
      - Monitor
      summary: Posts a new fault that is affecting a component
      description: Allows a component to report one or more faults currently affecting the component. Using this endpoint means that the client is not managing their own fault IDs, and the fault will require a new tracking UUID (that will be created and assigned in the response). 
      operationId: postNewFault
      requestBody:
        description: JSON description of a new, updated, or cleared fault
        required: true
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/Fault'
      responses:
        201:
          description: Created new fault
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        208:
          description: Already reported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        400:
          description: Bad request - something with the request is malformed or does not meet the specification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to create faults
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: The referenced component UUID cannot be found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.fault.write, fraihmwork.fault.admin]

    get:
      tags:
      - Faults
      - Monitor
      summary: Find all faults provided certain optional querying parameters
      operationId: findAllFaults
      parameters:
      - name: source
        in: query
        description: Filter results by source component's UUID. Can leave null to not filter
        schema:
          type: string
          format: uuid
      - name: reporter
        in: query
        description: Filter results by the reporter. Can leave null to not filter
        schema:
          type: string
          format: uuid
      - name: code
        in: query
        description: Filter results by fault code. Can leave null to not filter
        schema:
          type: integer
          format: int32
      - name: severity
        in: query
        description: Filter results by fault severity. Can leave null to not filter
        schema:
          type: string
          enum:
          - LOW
          - MEDIUM
          - HIGH
          - UNKNOWN  
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActiveFault'
        401:
          description: Unauthorized
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to read faults
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: Not Found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      deprecated: false
      security:
      - OAuth2: [fraihmwork.fault.read, fraihmwork.fault.write, fraihmwork.fault.admin]

  /monitor/v1/fault/{uuid}:
    get:
      tags:
      - Faults
      - Monitor
      summary: findFaultByUuid
      operationId: findFaultByUuid
      parameters:
        - name: uuid
          in: path
          description: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActiveFault'
        401:
          description: Unauthorized
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to read this fault
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: Not Found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      deprecated: false      
      security:
      - OAuth2: [fraihmwork.fault.read, fraihmwork.fault.write, fraihmwork.fault.admin]

    put:
      tags:
      - Faults
      - Monitor
      summary: Updates a fault that is affecting a component
      description: Allows a component to report one or more faults currently affecting the component. Note, requests with the fraihmwork.fault.write permission may be limited for authorization reasons. See the descriptions in the securitySchemes.OAuth2.flows.clientCredentials.scopes for more details.   
      operationId: updateFault
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the fault being updated
      requestBody:
        description: JSON description of a new, updated, or cleared fault
        required: true
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/Fault'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to update this fault
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: The referenced fault UUID cannot be found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.fault.write, fraihmwork.fault.admin]
        
    delete:
      tags:
      - Faults
      - Monitor
      summary: Clears a new fault that is no longer affecting a component
      description: Allows a component to clear a fault no longer affecting it. Note, requests with the fraihmwork.fault.write permission may be limited for authorization reasons. See the descriptions in the securitySchemes.OAuth2.flows.clientCredentials.scopes for more details.   
      operationId: deleteFault
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the fault being removed
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        202:
          description: Successfully accepted request. Actions like this may be deferred if the fault is currently in its minimum time to live, in which case this delete operation will take effect as soon as possible (provided it isn't overridden by an update or re-post of this fault)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to delete this fault
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: Unregistered UUID, or fault doesn't exist
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.fault.write, fraihmwork.fault.admin]

  /monitor/v1/fault/{uuid}/refresh:
    post:
      tags:
      - Faults
      - Monitor
      summary: Refresh a fault that is affecting a component
      description: Allows a component to refresh a fault currently affecting the component without changing any properties. Note, requests with the fraihmwork.fault.write permission may be limited for authorization reasons. See the descriptions in the securitySchemes.OAuth2.flows.clientCredentials.scopes for more details.  
      operationId: refreshFault
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the fault being refreshed
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to update this fault
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          description: The referenced fault UUID cannot be found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.fault.write, fraihmwork.fault.admin]

  /monitor/v1/requestId:
    get:
      tags:
      - UUID Control
      - Monitor
      summary: Request a unique ID to use in future API posts
      description: If the component does not already provide a UUID as part of its software suite, it will need to request a UUID from FRAIHMWORK to uniquely identify the source. Note that this operation does not guarantee any registration of the UUID - it merely generates one. The next call should be to register the UUID created
      operationId: requestId
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          
        500:
          description: Internal server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.component.read, fraihmwork.component.write, fraihmwork.component.admin]

  /mitigate/v1/blocklist:
    get:
      tags:
      - Blocklist
      - Mitigate
      summary: Requests the current blocklist
      description: This call requests the list of all components and systems that are currently being blocklisted
      operationId: getBlocklistedComponents
      responses:
        200:
          description: Returned blocklist information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blocklist'
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'                
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.blocklist.read, fraihmwork.blocklist.write, fraihmwork.blocklist.admin]
    
    post:
      tags:
      - Blocklist
      - Mitigate
      summary: Posts a blocklisted subsystem to the blocklist
      description: This call adds a system to the collection of blocklisted systems. Returns a blocklist UUID so that this can be referenced in the future
      operationId: postBlocklistedComponent
      requestBody:
        description: JSON description of the blocklisted system, including why it is being blocklisted
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlocklistedComponent'
      responses:
        201:
          description: Successfully posted new blocklisted system information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        208:
          description: Already reported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        400:
          description: Invalid payload
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'                
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.blocklist.write, fraihmwork.blocklist.admin]

  /mitigate/v1/blocklist/{uuid}:
    put:
      tags:
      - Blocklist
      - Mitigate
      summary: Updates a blocklisted subsystem in the blocklist
      description: This call replaces a blocklist entry so that it can be updated. It takes the blocklist UUID as a parameter.
      operationId: updateBlocklistEntry
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the system properties being updated
      requestBody:
        description: JSON description of the blocklisted system, including why it is being blocklisted
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlocklistedComponent'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        400:
          description: Invalid payload
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'                
        404:
          description: UUID not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.blocklist.write, fraihmwork.blocklist.admin]

    delete:  
      tags:
      - Blocklist
      - Mitigate
      summary: Deletes an entry from the blocklist
      description: This operation removes a system from the blocklist - forcing an update to the full blocklist with the targeted system no longer in it. This can result in the sending of an empty blocklist.
      operationId: deleteBlocklistEntry
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the blocklist properties being deleted
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        400:
          description: Invalid parameters
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'                
        404:
          description: UUID not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.blocklist.write, fraihmwork.blocklist.admin]

  /mitigate/v1/mitigation:
    get:
      tags:
      - Mitigation
      - Mitigate
      summary: Requests the current list of all mitigation actions 
      description: This call requests the list of all mitigation actions that have been issued since the start of the system. This is likely not going to be a commonly used call, see /mitigation/{status} below.
      operationId: getMitigations
      responses:
        200:
          description: Returned list of mitigation actions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MitigationList'
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to read mitigations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'                
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.mitigation.read, fraihmwork.mitigation.write, fraihmwork.mitigation.admin]
      
    post:
      tags:
      - Mitigation
      - Mitigate
      summary: Posts a mitigation action for one or more faults
      description: This call adds a system to the collection of possible mitigations. Returns a UUID upon successful POST. Mitigations having MANUAL resolution must only start in ACCEPTED state. Attempts to start mitigations in RECOMMENDED state will return a invalid payload code. 
      operationId: postMitigation
      requestBody:
        description: JSON description of the mitigation action
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mitigation'
      responses:
        201:
          description: Successfully posted new mitigation action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        208:
          description: Already reported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        400:
          description: Invalid payload
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to create mitigations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'                
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.mitigation.write, fraihmwork.mitigation.admin]
  
  /mitigate/v1/mitigation/{uuid}:
    get:
      tags:
      - Mitigation
      - Mitigate
      summary: Requests a specific mitigation action
      description: This call requests a mitigation action tied to its UUID
      operationId: getMitigationByUuid
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the mitigation action to be returned
      responses:
        200:
          description: Returned list of mitigation actions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MitigationDetails'
        400:
          description: Invalid parameters
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to read this mitigation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'                   
        404:
          description: UUID not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.mitigation.read, fraihmwork.mitigation.write, fraihmwork.mitigation.admin]
  
    put:
      tags:
      - Mitigation
      - Mitigate
      summary: Updates a mitigation action entry's state
      description: This call updates the state of an existing mitigation. Note, requests with the fraihmwork.mitigation.write permission may be limited for authorization reasons. See the descriptions in the securitySchemes.OAuth2.flows.clientCredentials.scopes for more details.  
      operationId: updateMitigationState
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Uuid of the mitigation action to be updated
      requestBody:
        description: JSON description of the mitigation action
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateAndTime'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        400:
          description: Invalid payload or parameters
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to update this mitigation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'                
        404:
          description: UUID not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.mitigation.write, fraihmwork.mitigation.admin]

  /mitigate/v1/mitigation/state/{state}:
    get:
      tags:
      - Mitigation
      - Mitigate
      summary: Requests all mitigations with specific state
      description: This call requests all mitigations having a specific state
      operationId: getMitigationByState
      parameters:
        - in: path
          name: state
          required: true
          schema:
            $ref: '#/components/schemas/MitigationState'
      responses:
        200:
          description: Returned list of mitigations belonging to the same Mitigation State
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MitigationList'
        400:
          description: Invalid State action
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        401:
          description: Not authenticated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        403:
          description: Forbidden - client is not authorized to read mitigations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'                   
        404:
          description: Mitigations not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        406:
          description: Not acceptable - only responds in application/json format
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        500:
          description: Server error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - OAuth2: [fraihmwork.mitigation.read, fraihmwork.mitigation.write, fraihmwork.mitigation.admin]


components:
  schemas:
    ActiveComponent:
      description: The final component data that are used for external consumption by displays and other services. These data may be altered between initial receipt and this value. 
      allOf:
        - $ref: '#/components/schemas/MonitoredComponent'
        - type: object
          properties:
            selfReportedState:
              # The original self-reported state of the component. Useful for when an override is performed due to a fault or other special circumstance. 
              $ref: '#/components/schemas/State'
              
            performanceStatistics:
              $ref: '#/components/schemas/ComponentStatistics'

            faultCounters:        
              $ref: '#/components/schemas/FaultCounters'              

    ActiveFault:
      description: The final 'fault' that is used for external consumption by displays and other services. Currently, this is the same data type as the Fault object, but leaves room for future expansion
      allOf:
        - $ref: '#/components/schemas/Fault'
        - type: object
          properties: {}

    Blocklist:
      type: object
      properties:
        timeOfValidity:
          type: string
          format: date-time
          description: The timestamp when this overall blocklist state was issued or confirmed to still be correct prior to issuing. Timestamp format is as specified by RFC 3339 section 5.6. 
        blocklist:
          items:
            type: object
            properties:
              blocklistId:
                type: string
                format: uuid
                description: The uuid of this blocklist entry
              entry:
                $ref: '#/components/schemas/BlocklistedComponent'
      required:
        - timeOfValidity
        - blocklist        

    BlocklistedComponent:
      type: object
      properties:
        componentId:
          type: string
          format: uuid
          description: The id of the system or component that is being blocklisted
        faultIds:
          type: array
          items:
            type: string
            format: uuid
          description: The list of all fault ids that are causing the blocklisting of this system
        sourceId:
          type: string
          format: uuid
          description: the id of the system or component that issued this blocklisting
        description:
          type: string
          description: The reason for the blocklist
        timeOfBlocklist:
          type: string
          format: date-time
          description: The timestamp that this component started to be blocklisted. Timestamp format is as specified by RFC 3339 section 5.6. 
        timeOfValidity:
          type: string
          format: date-time
          description: The last timestamp when this blocklist state was confirmed to still be correct. Assumed to be timestamp of last receipt of message if not provided. Timestamp format is as specified by RFC 3339 section 5.6. 
      required:
        - componentId
        - faultIds
        - sourceId
        - description
        - timeOfBlocklist
    ComponentRegistrationInformation:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
          description: The name of the component registering the unique identifier
        description:
          type: string
          description: A brief description of the component
        physicalLocation:
          type: string
          description: A physical location describing where the component is
        networkAddress:
          type: string
          description: A network location describing where the component is
        systemTimeout:
          type: integer
          minimum: 1
          description: Seconds within which a component update is expected from the client. If no update is received, FRAIHMWORK will consider the component lifeless.
        timeOfRegistration:
          type: string
          format: date-time
          description: The time that the component was first registered. Formatted according to RFC 3339 section 5.6.
      required:
        - uuid
        - name
    ComponentStatistics:
      type: object
      properties:
        timeOfRegistration:
          description: Time of first registration in FRAIHMWORK. The moment that we are first aware of the component. Formatted according to RFC 3339 section 5.6.
          type: string
          format: date-time
          
        timeOfPerformance:
          description: Defaults to TIME OF REGISTRATION unless there has been a reset from an administrator to start tracking a different period of time. Formatted according to RFC 3339 section 5.6.
          type: string
          format: date-time
          
        timeOfReplacement:
          description: Defaults to TIME OF REGISTRATION unless there has been a reset from an administrator to start tracking a different period of time. Tracks the last time that a component was repaired, replaced, or any other maintenance has been performed, thus requiring a reset in the lifetime statistics below / MTBF time. Formatted according to RFC 3339 section 5.6.
          type: string
          format: date-time
          
        sessionRunningTimeSeconds:
          description: If ONLINE, this is the amount of time in seconds that have passed between when the component started being ONLINE to the present. Otherwise 0.
          type: integer
          format: int64
        
        totalRunningTimeSeconds:
          description: This is the amount of time that the component has been ONLINE since it has been registered with FRAIHMWORK. Could be seen as the sum of all SESSION RUNNING TIMEs since the TIME OF REGISTRATION.
          type: integer
          format: int64
          
        registrationLifetimeSeconds:
          description: Total time passed since TIME OF REGISTRATION, not counting any time spent in UNAVAILABLE state.
          type: integer
          format: int64

        totalUptime:
          description: A percentage which is a function of TOTAL RUNNING TIME / REGISTRATION LIFETIME
          type: number
          format: double
          
        totalPerformanceRunningTimeSeconds:
          description: This is the amount of time that the component has been ONLINE since the TIME OF PERFORMANCE. Could be seen as a sum of all SESSION LIFETIMEs since the TIME OF PERFORMANCE. Used for tracking data over a specific period of time.
          type: integer
          format: int64

        performanceLifetimeSeconds:
          description: Total time passed since TIME OF PERFORMANCE, not counting any time spent in UNAVAILABLE state.
          type: integer
          format: int64

        performanceUptime:
          description: A percentage which is a function of (TOTAL PERFORMANCE RUNNING TIME) / (PERFORMANCE LIFETIME).
          type: number
          format: double
          
        totalReplacementRunningTimeSeconds:
          description: This is the amount of time in seconds that the component has been ONLINE since the TIME OF REPLACEMENT. Could be seen as a sum of all SESSION LIFETIMEs since the TIME OF REPLACEMENT. Used for tracking data over a specific period of time.
          type: integer
          format: int64

        replacementLifetimeSeconds:
          description: Total time in seconds that have passed since TIME OF REPLACEMENT not counting any time spent in UNAVAILABLE state.
          type: integer
          format: int64

        replacementUptime:
          description: A percentage which is a function of (TOTAL REPLACEMENT RUNNING TIME) / (REPLACEMENT LIFETIME).
          type: number
          format: double

        availability:
          description: Same as TOTAL UPTIME % for now. Will update definition as we gain ability to inject modules for handling different types of components (like using additional properties defined for radars)
          type: number
          format: double

    Fault:
      type: object
      description: A fault describes a specific condition that is adversely affecting the reporting component or subsystem. FRAIHMWORK uses this information to alert maintainers of problems, or to integrate various faults to identify larger system of system problems. Faults are identified by FRAIHMWORK by their name, code and source. Therefore there are assumptions to how faults are reported that should be abided by. Namely - each unique fault should have the same name and code information. Updates to the same fault should be reusing these keys, but can allow for other properties to change over time. If a fault is no longer active, it is expected that the component provides an update notifying FRAIHMWORK that the fault has been cleared. Otherwise, the fault will automatically clear after a default time interval if there have been no updates. 
      properties:
        uuid:
          type: string
          format: uuid
          description: The unique identifier of this fault, if provided by the client. If left blank, it is assumed that the UUID is being handled by the FRAIHMWORK server.
        name:
          type: string
          description: A brief high level summary of the fault
          
        description:
          type: string
          description: A more detailed description of the fault with as much relevant information as possible. Implementors are encouraged to define a standard format for fault descriptions that works for their service
        source:
          type: string
          format: uuid
          description: The source UUID of the component that is causing the fault. Used when the client can detect failures with other components or subsystems. When not included, it is assumed that the source is the UUID of this reporting client
        code:
          type: integer
          description: An integer representation of the fault code. This must be a value that always corresponds to a specific type of fault given a specific version of the component. Implementers are encouraged to give meaningful numbers to faults - for example, faults relating to firmware issues may all fall in the range of 500-599. 
        severity:
          type: string
          description: |
            This is a high level description of a fault affecting the service or component <br> <br>
            LOW is meant for faults that have no effect on the component. These are minor oddities that the software keeps track of but do not affect service quality in any way. <br> <br>
            MEDIUM level faults are meant for faults that affect the component's operational performance but do not affect the quality of information provided by a service. If a service is providing trustworthy information at a suboptimal rate, or if only non-critical functions are impeded, then a service is experiencing a MEDIUM level fault <br> <br>
            HIGH level faults affect service quality in some way because of a malfunction of the underlying software or hardware. These faults may resolve themselves over time, but should be associated with a FAULTED state. Services experiencing a HIGH level fault are operating below their performance specifications and are likely putting out bad data that cannot be trusted <br> <br>
            UNKNOWN is a level reserved for when the component cannot determine the source of a fault. This should not be used generally, as other services should treat UNKNOWN faults with the same level of caution as HIGH level faults
          enum:
          - LOW
          - MEDIUM
          - HIGH
          - UNKNOWN  
        
        timeOfDetection:
          type: string
          format: date-time
          description: The timestamp when this fault was first detected. Timestamp format is as specified by RFC 3339 section 5.6. If this field is not provided, it is assumed that the time of receipt of this fault is the time of detection (if it does not match any existing faults from the same component)
          
        timeOfValidity:
          type: string
          format: date-time
          description: The last timestamp when this fault was confirmed to still be active. Timestamp format is as specified by RFC 3339 section 5.6. If this field is not provided, it is assumed that the time of receipt of this fault message is the time of validity (and will try to match to any existing faults being tracked)
          
        timeout: 
          type: integer
          minimum: 1
          example: 100
          description: Seconds within which a fault update is expected from the reporting client. If no update is received, the fault is assumed to be resolved. This should be greater than or equal to the minimumTimeToLive field, if specified. If not specified, this is set to a default value specified by the deployment's configuration.
          
        minimumTimeToLive: 
          type: integer
          minimum: 0
          example: 5
          description: The minimum amount of time, in seconds, the fault should exist in the system before it is allowed to be cleared. This should be less than or equal to the timeout field, if specified. If not specified, this is set to a default value specified by the deployment's configuration.
        
        reporter:
          type: string
          format: uuid
          description: The unique identifier of the reporter of this fault, if provided.
          
        extensions:
          description: Optional parameter to provide any extensions to the default fault object type. These are expected to be collections of <String, String> pairs that are all gathered under a single String for a collection name. For example, a 'maintenance' extension would be one entry under 'extensions', and could itself contain five key / value mappings, the keys and values both bein
          type: object
          additionalProperties: true
      required:
        - name
        - code
        - severity

    FaultCounters:
      type: object
      description: This data type contains counters for faults against a given component relative to various reference times.
      properties:
      
        faultsLifetime:
          description: Total count of faults that have occurred on a component since the TIME OF REGISTRATION.
          type: integer
          format: int64
          
        faultsSinceStart:
          description: Total count of faults that have occurred on a component since TIME OF STARTUP.
          type: integer
          format: int64

    Mitigation:
      description: A message used to describe an mitigation to be taken against a fault.
      type: object
      properties:
        issuerId:
          type: string
          format: uuid
          description: The source component that issued this mitigation
        executorId:
          type: string
          format: uuid
          description: The component ID of the system that will execute this mitigation
        executorCallback:
          type: string
          format: url
          description: The base URL callback that is used to inform the executor that the action has been accepted or denied, or of any other status changes. When the state changes, a POST call will be made to the URL defined here, and will contain the same body provided in the /subscriber/mitigation/update endpoint.
        faultIds:
          type: array
          items:
            type: string
            format: uuid
          description: Zero or more ids of faults that are being addressed by this mitigation
        description:
          type: string
          description: Description of the mitigation that the system will take or has taken
        state:
          $ref: '#/components/schemas/MitigationState'
        resolution:
          $ref: '#/components/schemas/Resolution'
        timeIssued:
          type: string
          format: date-time
          description: The timestamp that this component instantiated this action. Timestamp format is as specified by RFC 3339 section 5.6. 
        timeOfValidity:
          type: string
          format: date-time
          description: The last timestamp when this action was accurate. If not provided, assumed to be the time of receipt of latest message Timestamp format is as specified by RFC 3339 section 5.6. 
      required: 
        - issuerId
        - executorId
        - description
        - timeIssued

    MitigationDetails:
      description: Mitigation action
      type: object
      properties:
        mitigationId:
          type: string
          format: uuid
        mitigation:
          $ref: '#/components/schemas/Mitigation'
      required:
        - mitigationId
        - mitigation

    MitigationList:
      description: List of mitigation actions
      type: array
      items:
        $ref: '#/components/schemas/MitigationDetails'
   
    MitigationState:
      type: string
      description: "
        This is a description of the current state of the action being taken. If this field is not provided, it is assumed to be 'RECOMMENDED'
        RECOMMENDED describes a mitigation action that was recommended to an end user, but is waiting for further instruction. Generally, from here the state can only change to 'ACCEPTED', 'REVOKED' or 'DENIED'
        ACCEPTED describes an action that has been accepted by a user or system, but has not yet been executed. From here, the state should only change to 'STARTED', 'REVOKED', or 'FAILED'
        STARTED describes an action that has been started and is still in progress. From herer, the state should only change to 'COMPLETE' or 'FAILED'
        COMPLETE describes an action that has been full resolved. This is an end state for the action
        FAILED describes an action that was unsuccessful in completing its task or its completion resulted in an unsatisfactory mitigation. This is an end state for the action
        REVOKED describes an action that the issuing system can no longer take or no longer desires to take. It effectively cancels the action, and is an end state.
        DENIED describes an action where a system or user has declined to allow the action to take place. It is an end state for the action
        "
      enum:
      - RECOMMENDED
      - ACCEPTED
      - STARTED
      - COMPLETE
      - FAILED
      - REVOKED
      - DENIED
      default: RECOMMENDED

    MonitoredComponent:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: The unique identifier of this component, if provided by the client. If left blank, it is assumed that the UUID is being handled by the FRAIHMWORK server.
        name:
          type: string
          description: The name of the component
        description:
          type: string
          description: Summary of services provided by this component
        componentLibraryName:
          type: string
          description: An optional reference to a pre-configured component library entity
        state:
          $ref: '#/components/schemas/State'
        version:
          $ref: '#/components/schemas/Version'
        physicalLocation:
          type: string
          description: General description of where the component or component actually is (to differentiate it from other, redundant components)
        networkAddress:
          type: string
          description: An IPv4, IPv6, DNS or other URI that can be used to reach back to this component. This is for documentation purposes and will not currently be validated
        manufacturer:
          type: string
          description: Company or entity providing the service or component
        model:
          type: string
          description: The exact model string or number that describes this component
        startupTime:
          type: string
          format: date-time
          description: The time that this component last reached an operational state. If not provided, FRAIHMWORK will assume that the start time is last time it received a message with state = OPERATIONAL from this component. Follows format as specified by RFC 3339 section 5.6, which is a specific implementation of ISO 8601
        parent:
          type: string
          format: uuid
          description: This is an optional field that can be used to denote that this is a subsystem of a different component. If left blank, it is assumed that there is no parent for this component, otherwise, it is expected that the UUID provided corresponds to an already existing and registered component.
        timeOfValidity:
          type: string
          format: date-time
          description: The last timestamp when this message's information was guaranteed to be accurate. If this field is not provided, it is assumed that the time of receipt of this message is the time of validity
        timeout:
          type: integer
          minimum: 1
          example: 100
          description: Seconds within which a component update is expected from the client. If no update is received, the component will consider the component unlively.
        reporter:
          type: string
          format: uuid
          description: The unique identifier of the reporter of this component, if applicable. This assumes that the reporting entity is also a component with a UUID already assigned. This is to allow for components to report status on other components' (such as child entities) behalf.
        extensions:
          description: The addition for any component extensions that are optionally included to provide stereotyped information for a particular component. 
          type: object
          nullable: true
          additionalProperties: true

      required: 
        - name
        - state

    Resolution:
      type: string
      description: "
        This is an indication of whether a mitigation is to be resolved by a human or by a service
        MANUAL describes when a mitigation is to be resolved by a human. Mitigations having MANUAL resolution must only start in ACCEPTED state. Attempts to start mitigations in RECOMMENDED state will return a invalid payload code.
        AUTOMATIC describes when a mitigation is to be resolved by a service
        "
      enum:
      - MANUAL
      - AUTOMATIC
      default: AUTOMATIC

    Response:
      type: object
      properties:
        itemId:
          type: string
          format: uuid
        message:
          type: string
          description: The success message provided back to the client
      required:
        - message

    RecurringSchedule:
      type: object
      required:
        - componentId
        - schedules
      properties:
        componentId:
          type: string
          format: uuid
          description: |
            The unique identifier for the component. 
        schedules:
          type: array
          items:
            type: object
            required:
              - days
              - periods
            properties:
              days:
                type: array
                items:
                  type: string
                  enum:
                    - Monday
                    - Tuesday
                    - Wednesday
                    - Thursday
                    - Friday
                    - Saturday
                    - Sunday
                    - All
                description: |
                  Specifies the days of the week that the periods apply to.
                  - Users can list individual days (e.g., Monday, Tuesday, All) to specify scheduling data for those days.
                  - If 'All' is selected, the component will be marked as unavailable for the entire week.
              periods:
                type: array
                items:
                  type: object
                  description: |
                    Defines specific periods for the schedule.
                    - The `periods` array must be present, but individual `start` and `end` fields are optional.
                    - If `periods` is provided as an empty array, the schedule will apply for the entire day (`T00:00:00Z` to `T23:59:59Z`).
                    - If `start` and `end` are specified, they must be provided in ISO 8601 format. Start and end times can be in UTC (e.g., `T11:41:23Z` or `11:41:23Z`) or with a timezone offset (e.g., `T11:41:23-05:00` or `11:41:23-05:00`). The 'T' is optional and can be omitted in the time format.
                  properties:
                    start:
                      type: string
                      description: |
                        Start time of the period, in ISO 8601 format.
                        - The format is either THH:MM:SSZ, where 'T' represents time and 'Z' represents UTC, or HH:MM:SSZ. Timezone offsets are accepted (e.g., THH:MM:SS-05:00 or HH:MM:SS-05:00).
                        - The 'T' is optional and both formats with and without the 'T' character are acceptable.
                        Examples:
                        - T00:00:00Z (Start of the day in UTC, with 'T')
                        - 00:00:00Z (Start of the day in UTC, without 'T')
                        - T11:41:23Z (UTC - Coordinated Universal Time, with 'T')
                        - 11:41:23Z (UTC - Coordinated Universal Time, without 'T')
                        - T11:41:23-05:00 (CST - Central Standard Time, with 'T')
                        - 11:41:23-05:00 (CST - Central Standard Time, without 'T')
                        - Seconds are optional and will be ignored by the server to avoid false precision. If not provided, the time defaults to the start of the minute (e.g., T23:59:00Z or 23:59:00Z).
                        - If not specified, defaults to the start of the day (T00:00:00Z or 00:00:00Z).
                    end:
                      type: string
                      description: |
                        End time of the period, in ISO 8601 format.
                        - The format is either THH:MM:SSZ, where 'T' represents time and 'Z' represents UTC, or HH:MM:SSZ. Timezone offsets are accepted (e.g., THH:MM:SS-05:00 or HH:MM:SS-05:00).
                        - The 'T' is optional and both formats with and without the 'T' character are acceptable.
                        Examples:
                        - T23:59:59Z (End of the day in UTC, with 'T')
                        - 23:59:59Z (End of the day in UTC, without 'T')
                        - T11:41:23Z (UTC - Coordinated Universal Time, with 'T')
                        - 11:41:23Z (UTC - Coordinated Universal Time, without 'T')
                        - T11:41:23-05:00 (CST - Central Standard Time, with 'T')
                        - 11:41:23-05:00 (CST - Central Standard Time, without 'T')
                        - Seconds are optional and will be ignored by the server to avoid false precision. If not provided, the time defaults to the end of the minute (e.g., T11:41:59Z or 11:41:59Z), and the end time is set as an inclusive boundary.
                        - If not specified, defaults to the end of the day (T23:59:59Z or 23:59:59Z).

    State:
      type: object
      properties:
        state:
          type: string
          description: "
          This is a high level description of the component or subsystem state. <br> <br>
          UNAVAILABLE describes a component that is not expected to be providing services. It can represent a component that is configured within FRAIHMWORK but has not been connected to yet, a component that is not scheduled to be active for a period of time. Time statistics are not collected against a component in the UNAVAILABLE state, so being in UNAVAILABLE does not affect lifetime or uptime data. This state cannot be overridden by faults.  <br> <br>
          STARTING_UP is for services being powered on - services may not be available yet but they should be soon. If a HIGH or UNKNOWN severity fault occurs, this component will instead report as FAULTED.  <br> <br>
          ONLINE describes a component with services provided. If a HIGH or UNKNOWN severity fault occurs, this component will instead report as FAULTED.  <br> <br>
          FAULTED describes a component that has a significant fault that is affecting its ability to provide services. This can be self-reported in conjunction with a fault report, or can be reached automatically if a HIGH or UNKNOWN fault is reported (see other state descriptions)"
          enum:
          - UNAVAILABLE
          - STARTING_UP
          - ONLINE
          - FAULTED
        description:
          type: string
          description: An optional detailed description of the component state in order to provide more context for future queries or for the display. This field can be left blank if the enum fully describes the component state with no additional qualifications. This is provided by the client, and there are currently no restrictions on what this field can be used for. 
      required:
        - state

    StateAndTime:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/MitigationState'
        timeOfValidity:
          type: string
          format: date-time
          description: The timestamp that this state change was issued. If not provided, assumed to be the time of receipt of latest message. Timestamp format is as specified by RFC 3339 section 5.6. 
      required:
        - state

    Version:
      type: object
      description: The version of the component. For maximum flexibility, this is provided as string values to allow for different versioning schemes.
      properties:
        hardware:
          type: string
          description: The version of the component's hardware package, if applicable
        software:
          type: string
          description: The version of the component's software package, if applicable
        firmware:
          type: string
          description: The version of the component's firmware package, if applicable
        configuration:
          type: string
          description: The version of the component's configuration, if applicable


  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          # Note that multiple authorization servers can be specified to serve this API, and this description only provides details for the default
          # internal security configuration. Each of the scopes below corresponds to a FRAIHMWORK permission, and can be configured to align to a 
          # different scope or role provided by a 3rd party authorization server, if required. However, at time of writing it is assumed that 
          # authentication activities are always happening over a client-credentials oauth2 flow.
          tokenUrl: https://well-known/oauth-authorization-server/token
          refreshUrl: https://well-known/oauth-authorization-server/refresh
          scopes:
            fraihmwork.component.admin: Client may create, read, update, or delete any component regardless of creator.
            fraihmwork.component.write: Client may create new components, but can only update and delete components they create. Client may read all components regardless of creator.
            fraihmwork.component.read: Client may read any component that FRAIHMWORK can provide, regardless of creator.
            fraihmwork.fault.admin: Client may create, read, update, or delete any fault regardless of creator.
            fraihmwork.fault.write: Client may create new faults, but can only update and delete faults they create. Client may read all faults regardless of creator.
            fraihmwork.fault.read: Client may read any fault that FRAIHMWORK can provide, regardless of creator.
            fraihmwork.blocklist.admin: Client may create, read, update, or delete any blocklist entry regardless of creator.
            fraihmwork.blocklist.write: Client may create new elements within the Blocklist, and update and delete elements they create. Client can read all blocklist information regardless of creator.
            fraihmwork.blocklist.read: Client may read all blocklist entries, regardless of creator.
            fraihmwork.mitigation.admin: Client may create, read, update, or delete any mitigation regardless of creator.
            fraihmwork.mitigation.write: Client may create new mitigations, but can only update and delete mitigations they create. Client may read all mitigations regardless of creator.
            fraihmwork.mitigation.read: Client may read any mitigation that FRAIHMWORK can provide, regardless of creator.
